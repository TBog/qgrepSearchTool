<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" xmlns:av="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="av">
    <SolidColorBrush x:Key="Background" Color="White" />
    <SolidColorBrush x:Key="Foreground" Color="Black" />
    <SolidColorBrush x:Key="Result.File.Foreground" Color="Gray"/>
    <SolidColorBrush x:Key="Result.Text.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Result.Highlight.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Result.Highlight.Background" Color="#25a5be" />
    <SolidColorBrush x:Key="Result.IsMouseOver.Background" Color="#d3eaf2" />
    <SolidColorBrush x:Key="Result.IsSelected.Background" Color="#bee0ec" />
    <SolidColorBrush x:Key="IconButton.Background" Color="Transparent" />
    <SolidColorBrush x:Key="IconButton.Foreground" Color="Gray" />
    <SolidColorBrush x:Key="IconButton.IsMouseOver.Background" Color="Transparent" />
    <SolidColorBrush x:Key="IconButton.IsMouseOver.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Border" Color="Gray" />
    <SolidColorBrush x:Key="Border.IsMouseOver" Color="Black" />
    <SolidColorBrush x:Key="Border.IsSelected" Color="Black" />
    <SolidColorBrush x:Key="TextBox.Hint.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="TextBox.Hint.Foreground" Color="Gray"/>
    <SolidColorBrush x:Key="Overlay.Background" Color="#7C000000" />
    <SolidColorBrush x:Key="Button.IsDisabled.Background" Color="#38618d" />
    <SolidColorBrush x:Key="Button.IsDisabled.Foreground" Color="#b4c4d4" />
    <SolidColorBrush x:Key="Button.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="Button.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Button.IsMouseOver.Background" Color="#bee0ec" />
    <SolidColorBrush x:Key="Button.IsMouseDown.Background" Color="Gray" />
    <SolidColorBrush x:Key="ComboBox.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="ComboBox.IsMouseOver.Background" Color="#bee0ec" />
    <SolidColorBrush x:Key="ComboBox.Foreground" Color="Black" />
    <SolidColorBrush x:Key="TextBox.Toggle.Foreground" Color="#575d7a" />
    <SolidColorBrush x:Key="TextBox.Toggle.IsMouseOver.Foreground" Color="#abaebd" />
    <SolidColorBrush x:Key="TextBox.Toggle.IsChecked.Foreground" Color="Black" />
    <SolidColorBrush x:Key="TextBox.Toggle.IsChecked.IsMouseOver.Foreground" Color="#dddfe4" />
    <SolidColorBrush x:Key="CheckBox.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="CheckBox.IsMouseOver.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="CheckBox.Mark" Color="Black" />
    <SolidColorBrush x:Key="CheckBox.Foreground" Color="Black" />
    <Style x:Key="MonospacedText" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="NormalText" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="MonospacedTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Consolas" />
    </Style>
    <Style x:Key="NormalTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>
    <Style x:Key="IconButton" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="Background" Value="{DynamicResource IconButton.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource IconButton.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource IconButton.IsMouseOver.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource IconButton.IsMouseOver.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SomeTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MonospacedText}">
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource Border.IsSelected}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="CaretBrush" Value="{DynamicResource Foreground}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Height" Value="24" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Padding" Value="3,2,3,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Border.IsSelected}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Border.IsMouseOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Border.IsMouseOver}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Border.IsSelected}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="{DynamicResource Button.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Button.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border TextBlock.Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" x:Name="Border" CornerRadius="1" BorderThickness="0" Padding="5,0">
                        <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Button.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Button.IsMouseDown.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Button.IsDisabled.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Button.IsDisabled.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ComboBox.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource ComboBox.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="20" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="0" BorderThickness="0" Background="{TemplateBinding Background}"/>
                        <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ComboBox.IsMouseOver.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource ComboBox.Foreground}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton" Style="{DynamicResource ComboBoxToggleButton}" Grid.Column="2" Focusable="false" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="3,3,23,3" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                        <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="3,3,23,3" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" BorderThickness="0"/>
                                <ScrollViewer Margin="0" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource ComboBox.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource ComboBox.Background}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border" Padding="2" SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ComboBox.IsMouseOver.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SomeCheckbox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Toggle.Foreground}" />
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Height" Value="16" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource TextBox.Toggle.IsChecked.IsMouseOver.Foreground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource TextBox.Toggle.IsMouseOver.Foreground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource TextBox.Toggle.IsChecked.Foreground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource CheckBox.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource CheckBox.Background}" />
        <Setter Property="Margin" Value="5,6,0,4" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Height" Value="16" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border" Width="13" Height="13" CornerRadius="0" BorderThickness="0" Background="{TemplateBinding Background}">
                                <Grid>
                                    <Path Visibility="Collapsed" Width="7" Height="7" x:Name="CheckMark" SnapsToDevicePixels="False" StrokeThickness="2" Stroke="{DynamicResource CheckBox.Mark}" Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                                    <Path Visibility="Collapsed" Width="7" Height="7" x:Name="InderminateMark" SnapsToDevicePixels="False" StrokeThickness="2" Stroke="{DynamicResource CheckBox.Mark}" Data="M 0 7 L 7 0" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CheckBox.IsMouseOver.Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SomeWindow" TargetType="{x:Type UserControl}">
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="Background" Value="{DynamicResource Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
    </Style>
    <Style TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="{DynamicResource Background}" />
    </Style>
    <Style x:Key="SomeHintLabel" TargetType="{x:Type Label}" BasedOn="{StaticResource MonospacedText}">
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Background" Value="{DynamicResource TextBox.Hint.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Hint.Foreground}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,0,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="ResultPanel" TargetType="{x:Type VirtualizingStackPanel}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Result.IsMouseOver.Background}"/>
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                <Setter Property="Background" Value="{DynamicResource Result.IsSelected.Background}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="Result" TargetType="TextBlock" BasedOn="{StaticResource MonospacedTextBlock}">
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>
    <Style x:Key="ResultFile" TargetType="TextBlock" BasedOn="{StaticResource Result}">
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource Result.File.Foreground}" />
    </Style>
    <Style x:Key="ResultText" TargetType="TextBlock" BasedOn="{StaticResource Result}">
        <Setter Property="Foreground" Value="{DynamicResource Result.Text.Foreground}" />
    </Style>
    <Style x:Key="ResultHighlightedText" TargetType="TextBlock" BasedOn="{StaticResource Result}">
        <Setter Property="Foreground" Value="{DynamicResource Result.Highlight.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource Result.Highlight.Background}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style x:Key="ResultsItemsList" TargetType="ItemsControl">
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ItemsControl.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}" Padding="{TemplateBinding Control.Padding}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" SnapsToDevicePixels="True">
                        <ScrollViewer Name="SearchScrollbar" Padding="{TemplateBinding Control.Padding}" Focusable="False">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsControl.ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OverlayBorder" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource Overlay.Background}" />
    </Style>
    <Style TargetType="TextBlock" BasedOn="{StaticResource NormalTextBlock}">
    </Style>
    <Style x:Key="OverlayText" TargetType="TextBlock" BasedOn="{StaticResource NormalTextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="HoverableRow" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Result.IsMouseOver.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SelectableRow" TargetType="{x:Type Grid}" BasedOn="{StaticResource HoverableRow}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                <Setter Property="Background" Value="{DynamicResource Result.IsSelected.Background}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ZIndexFocusable" TargetType="{x:Type FrameworkElement}">
        <Setter Property="Panel.ZIndex" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Panel.ZIndex" Value="2" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SomeBorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource ZIndexFocusable}">
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Border.IsMouseOver}"/>
                <Setter Property="Tag" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="PanelEntry" TargetType="Label" BasedOn="{StaticResource MonospacedText}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="5,0,5,0" />
    </Style>
    <Style x:Key="PanelEntryFirst" TargetType="Label" BasedOn="{StaticResource PanelEntry}">
        <Setter Property="Foreground" Value="{DynamicResource Result.File.Foreground}" />
    </Style>
    <Style x:Key="PanelEntrySecond" TargetType="Label" BasedOn="{StaticResource PanelEntry}">
        <Setter Property="Foreground" Value="{DynamicResource Result.Text.Foreground}" />
    </Style>
    <Style x:Key="SettingsLabel" TargetType="Label" BasedOn="{StaticResource NormalText}">
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
    </Style>
</ResourceDictionary>