<Application x:Class="qgrepSearchTool_Standalone.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:qgrepSearchTool_Standalone"
             xmlns:controlzEx="urn:controlzex"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#1F1F1F" />
        <SolidColorBrush x:Key="Button.Static.Border" Color="#1F1F1F" />
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#3D3D3D" />
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#3D3D3D" />
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#383838" />
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#383838" />
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />

        <Style x:Key="{x:Type controlzEx:WindowChromeWindow}" TargetType="{x:Type controlzEx:WindowChromeWindow}">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{x:Null}" />
            <Setter Property="NCActiveBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}}" />
            <Setter Property="NCCurrentBrush" Value="{Binding NCActiveBrush, RelativeSource={RelativeSource Self}}" />
            <Setter Property="NCNonActiveBrush" Value="{Binding Source={x:Static SystemColors.WindowFrameBrush}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type controlzEx:WindowChromeWindow}">
                        <Grid Background="{TemplateBinding Background}"
                                  Margin="{TemplateBinding Padding}">
                            <AdornerDecorator>
                                <ContentPresenter />
                            </AdornerDecorator>

                            <Border x:Name="PART_Border"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Background="{x:Null}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        UseLayoutRounding="True" />

                            <ResizeGrip x:Name="WindowResizeGrip"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Bottom"
                                            IsTabStop="false"
                                            Visibility="Collapsed"
                                            controlzEx:WindowChrome.ResizeGripDirection="BottomRight" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                                    <Condition Property="Window.WindowState" Value="Normal" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="WindowState" Value="Maximized">
                    <Setter Property="Margin" Value="0" />
                </Trigger>
                <!--
                        #1823 try to fix another nasty issue
                        WindowState = Maximized
                        ResizeMode = NoResize
                    -->
                <Trigger Property="ResizeMode" Value="NoResize">
                    <Setter Property="Margin" Value="0" />
                </Trigger>
                <Trigger Property="IsNCActive" Value="False">
                    <Setter Property="NCCurrentBrush" Value="{Binding NCNonActiveBrush, RelativeSource={RelativeSource Self}}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="WindowTitleBarButton" TargetType="Button">
            <Style.Setters>
                <Setter Property="Background" Value="{DynamicResource Button.Static.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ButtonBase}">
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Button.IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
            <Style.Triggers>
                <Trigger Property="controlzEx:NonClientControlProperties.IsNCMouseOver" Value="true">
                    <Setter Property="Background" Value="{StaticResource Button.MouseOver.Background}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" Value="{StaticResource Button.MouseOver.Background}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter Property="Background" Value="{StaticResource Button.Pressed.Background}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
                </Trigger>
                <Trigger Property="controlzEx:NonClientControlProperties.IsNCPressed" Value="true">
                    <Setter Property="Background" Value="{StaticResource Button.Pressed.Background}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Application.Resources>
</Application>
